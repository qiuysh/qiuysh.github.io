<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吾林の手扎</title>
  
  <subtitle>操千曲而后晓声，观千剑而后识器。</subtitle>
  <link href="https://qiuysh.github.io/atom.xml" rel="self"/>
  
  <link href="https://qiuysh.github.io/"/>
  <updated>2021-12-03T07:05:43.571Z</updated>
  <id>https://qiuysh.github.io/</id>
  
  <author>
    <name>吾林の手扎</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redux 浅析</title>
    <link href="https://qiuysh.github.io/2021/12/03/Redux%E6%B5%85%E6%9E%90/"/>
    <id>https://qiuysh.github.io/2021/12/03/Redux%E6%B5%85%E6%9E%90/</id>
    <published>2021-12-03T02:06:48.000Z</published>
    <updated>2021-12-03T07:05:43.571Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>JS 应用的状态容器，提供可预测的状态管理</p><h5 id="三大原则"><a href="#三大原则" class="headerlink" title="三大原则"></a>三大原则</h5><p>1、单一数据源</p><p>整个应用的全局 state 被存储在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中</p><p>2、state是只读的</p><p>唯一改变 state 的方法就是触发 action, action 是一个用于描述已发生事件的普通对象。</p><p>3、使用纯函数来执行修改</p><p>为了描述 action 如何改变 state tree，你需要编写纯的 reducers。</p><h5 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view -&gt; dispath(action) -&gt; reducer -&gt; subscribe -&gt; view(流回)</span><br></pre></td></tr></table></figure><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h5 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h5><p>同步的 redux 可以非常清晰的体现出 3 大原则和单向数据流。</p><img src="https://cn.redux.js.org/assets/images/ReduxDataFlowDiagram-49fa8c3968371d9ef6f2a1486bd40a26.gif" /><h5 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h5><p>redux 本身不提供处理异步的方式，如果你需要异步的操作需求，可以添加 middleware 来增强 redux 的功能。</p><img src="https://cn.redux.js.org/assets/images/ReduxAsyncDataFlowDiagram-d97ff38a0f4da0f327163170ccc13e80.gif" /><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><h5 id="顶级API"><a href="#顶级API" class="headerlink" title="顶级API"></a>顶级API</h5><p>1、createStore(reducer, [preloadedState], [enhancer])</p><p>创建store接收三个参数:</p><ul><li>reducer 是一个函数，返回新的状态，接受两个参数：当前的 state 和要触发的 action ；</li><li>preloadedState 为初始时的 state 对象；</li><li>enhancer 可选使用。用第三方第能力如中间件、时间旅行、持久化来增强 store；</li></ul><p>2、combineReducers(reducers)</p><p>合并 reducer 单元，返回combination(state, action)，即 reducer。</p><p>3、applyMiddleware(…middlewares)</p><p>   扩展中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./compose'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;...Function&#125;</span> </span>middlewares The middleware chain to be applied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Function&#125;</span> </span>A store enhancer applying the middleware.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Dispatching while constructing your middleware is not allowed. '</span> +</span><br><span class="line">          <span class="string">'Other middleware would not be applied to this dispatch.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 暴露getState和dispatch给第三方中间件</span></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取中间件数组传入参数</span></span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function">(<span class="params">middleware</span>) =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    <span class="comment">// 组合成新的dispatch</span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"><span class="comment">// 返回新的store</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、 bindActionCreators(actionCreators, dispatch)</p><p>  包装</p><p>5、compose(…functions)</p><p>   组合函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">arg</span>) =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> a(b(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Store-API"><a href="#Store-API" class="headerlink" title="Store API"></a>Store API</h5><ul><li>getState</li><li>dispath</li><li>subscribe</li><li>replaceReducer</li></ul><p>当 enhancer 传参的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Expected the enhancer to be a function. Instead, received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">          enhancer</span></span></span><br><span class="line"><span class="string"><span class="subst">        )&#125;</span>'`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 返回增强后的createStore</span></span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h6 id="getState"><a href="#getState" class="headerlink" title="getState"></a>getState</h6><p>返回应用当前的 state 树</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="dispath"><a href="#dispath" class="headerlink" title="dispath"></a>dispath</h6><p>分发 action。这是触发 state 变化的惟一途径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">true</span></span><br><span class="line">      <span class="comment">// 使用currentReducer处理传入的currentState, action</span></span><br><span class="line">      currentState = currentReducer(currentState, action)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//通知所有之前通过subscribe订阅state更新的回调listener</span></span><br><span class="line">    <span class="keyword">const</span> listeners = (currentListeners = nextListeners)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> listener = listeners[i]</span><br><span class="line">      listener()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> action</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h6><p>添加一个变化监听器。每当 dispatch action 的时候就会执行，state 树中的一部分可能已经变化。你可以在回调函数里调用 getState() 来拿到当前 state。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 确保只有第一次执行unsubscribe()才是有效的，只取消注册当前listener</span></span><br><span class="line">    <span class="keyword">var</span> isSubscribed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    ensureCanMutateNextListeners()</span><br><span class="line">    nextListeners.push(listener)</span><br><span class="line"><span class="comment">// 返回取消订阅函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      isSubscribed = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      ensureCanMutateNextListeners()</span><br><span class="line">      <span class="keyword">var</span> index = nextListeners.indexOf(listener)</span><br><span class="line">      nextListeners.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="replaceReducer"><a href="#replaceReducer" class="headerlink" title="replaceReducer"></a>replaceReducer</h6><p>替换 store 当前用来计算 state 的 reducer。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nextReducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the nextReducer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentReducer = nextReducer</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>我们知道将 reducer 设计为纯函数，让它们更容易调试和比较；但这也带来了其它问题，比如涉及到接口调用之类的就不能处理。那么中间件便是用来增强 redux 功能的一种中间函数。</p><p>以 Redux-thunk 为例，以下为 thunk 的实现源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> <span class="comment">// 中间件函数</span></span><br><span class="line">  next =&gt; <span class="comment">// 中间件函数创建的改造函数</span></span><br><span class="line">    action =&gt; &#123; <span class="comment">// 改造函数改造后的 dispatch</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生态库"><a href="#生态库" class="headerlink" title="生态库"></a>生态库</h3><ul><li>Redux Toolkit</li><li>Redux-thunk</li><li>React-redux</li><li>React-redux-router</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://cn.redux.js.org/introduction/getting-started" target="_blank" rel="noopener">Redux 中文官网</a></p>]]></content>
    
    
    <summary type="html">关于 Redux 源码的分析</summary>
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Redux" scheme="https://qiuysh.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>React 事件系统</title>
    <link href="https://qiuysh.github.io/2021/09/13/React%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://qiuysh.github.io/2021/09/13/React%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-09-13T14:48:13.000Z</published>
    <updated>2021-12-03T06:24:07.268Z</updated>
    
    <content type="html"><![CDATA[<h3 id="零、从零开始"><a href="#零、从零开始" class="headerlink" title="零、从零开始"></a>零、从零开始</h3><p>在看下面 React 事件系统相关流程之前，我们先看看整个 React 渲染的大概流程；以便于后面更轻松地学习 React 事件系统相关概念。<br>下图大概是描述了不管 Mount 还是 Update 触发的行为到完成渲染，都会经历 Render 和 Commit 两个阶段，Render 阶段做的事情：根据优先级调度执行过程可打断、遍历Fiber树、Diff更新Fiber树等，Commit 阶段触发生命周期钩子，遍历Fiber完成渲染。</p><center><img src="react渲染流程.png" width="30%"/></center><h3 id="一、浏览器事件流"><a href="#一、浏览器事件流" class="headerlink" title="一、浏览器事件流"></a>一、浏览器事件流</h3><h5 id="DOM-事件流的三个阶段"><a href="#DOM-事件流的三个阶段" class="headerlink" title="DOM 事件流的三个阶段"></a>DOM 事件流的三个阶段</h5><p> 事件捕获阶段<br> 目标元素阶段<br> 事件冒泡阶段</p><h5 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h5><center><img src="dom事件流.png" width="60%" /></center><h3 id="二、React-事件系统"><a href="#二、React-事件系统" class="headerlink" title="二、React 事件系统"></a>二、React 事件系统</h3><p>合成事件的说明 React 并不会在该 DOM 元素上直接绑定事件处理器，React 内部自定义了一套事件系统，在这个系统上统一进行事件订阅和分发。<br>具体来讲，React 利用事件委托机制在 Root 容器上统一监听 DOM 事件，再根据触发的 target 将事件分发到具体的组件实例。另外上面 e 是一个合成事件对象( SyntheticEvent ), 而不是原始的 DOM 事件对象。</p><h5 id="为何要自定义事件系统"><a href="#为何要自定义事件系统" class="headerlink" title="为何要自定义事件系统"></a>为何要自定义事件系统</h5><p>根据 W3C 规范定义合成事件抹平浏览器之间的兼容性差异；<br>分成设计，解决跨平台问题；<br>干预事件触发，React 需要知道触发了什么事件，通过什么原生事件调用真实事件；<br>性能优化，避免事件直接绑定在dom上；</p><h3 id="三、事件流程浅析"><a href="#三、事件流程浅析" class="headerlink" title="三、事件流程浅析"></a>三、事件流程浅析</h3><p>React17事件系统架构图</p><center><img src="react事件系统.png" width="70%" /></center><h5 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h5><p>初始化形成必要的事件映射关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eventPriorities：原生事件及其优先级的映射 Map结构</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"click"</span> =&gt; <span class="number">0</span>,<span class="string">"drag"</span> =&gt; <span class="number">1</span>,<span class="string">"load"</span> =&gt; <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// topLevelEventsToReactNames：原生事件和合成事件的映射 Map结构</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"cancel"</span> =&gt; <span class="string">"onCancel"</span>,<span class="string">"click"</span> =&gt; <span class="string">"onClick"</span>,<span class="string">"close"</span> =&gt; <span class="string">"onClose"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// allNativeEvents：所有有意义的原生事件名称集合 Set结构</span></span><br><span class="line">&#123;<span class="string">'cancel'</span>, <span class="string">'click'</span>, <span class="string">'close'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// registrationNameDependencies：合成事件和其依赖的原生事件集合的映射</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"onCancel"</span>: [<span class="string">"cancel"</span>],</span><br><span class="line">  <span class="string">"onCancelCapture"</span>: [<span class="string">"cancel"</span>],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">"onChange"</span>: [<span class="string">"change"</span>, <span class="string">"click"</span>, <span class="string">"focusin"</span>,<span class="string">"focusout"</span>, <span class="string">"input"</span>, <span class="string">"keydown"</span>, <span class="string">"keyup"</span>, <span class="string">"selectionchange"</span>],</span><br><span class="line">  <span class="string">"onCancelCapture"</span>: [<span class="string">"change"</span>, <span class="string">"click"</span>, <span class="string">"focusin"</span>,<span class="string">"focusout"</span>, <span class="string">"input"</span>, <span class="string">"keydown"</span>, <span class="string">"keyup"</span>, <span class="string">"selectionchange"</span>],</span><br><span class="line">  <span class="string">"onSelect"</span>: [<span class="string">"focusout"</span>, <span class="string">"contextmenu"</span>, <span class="string">"dragend"</span>, <span class="string">"focusin"</span>, <span class="string">"keydown"</span>, <span class="string">"keyup"</span>, <span class="string">"mousedown"</span>, <span class="string">"mouseup"</span>, <span class="string">"selectionchange"</span>],</span><br><span class="line">  <span class="string">"onSelectCapture"</span>: [<span class="string">"focusout"</span>, <span class="string">"contextmenu"</span>, <span class="string">"dragend"</span>, <span class="string">"focusin"</span>, <span class="string">"keydown"</span>, <span class="string">"keyup"</span>, <span class="string">"mousedown"</span>, <span class="string">"mouseup"</span>, <span class="string">"selectionchange"</span>],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件的优先级：<br>DiscreteEvent：离散事件，cancel、click、mousedown 这类单点触发不持续的事件，优先级最低<br>UserBlockingEvent：用户阻塞事件，drag、mousemove、wheel 这类持续触发的事件，优先级相对较高<br>ContinuousEvent：连续事件，load、error、waiting 这类大多与媒体相关的事件为主的事件需要及时响应，所以优先级最高</p><p>所以事件优先级：ContinuousEvent &gt; UserBlockingEvent &gt; DiscreteEvent</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SimpleEventPlugin.registerEvents();</span><br><span class="line">EnterLeaveEventPlugin.registerEvents();</span><br><span class="line">ChangeEventPlugin.registerEvents();</span><br><span class="line">SelectEventPlugin.registerEvents();</span><br><span class="line">BeforeInputEventPlugin.registerEvents();</span><br></pre></td></tr></table></figure><p><a href="https://github.com/facebook/react/blob/main/packages/react-dom/src/events/DOMPluginEventSystem.js" target="_blank" rel="noopener">源码地址</a></p><center><img src="事件注册.png" width="20%" /></center><h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><p>获取应用中的所有原生事件，添加到监听器中，且添加带有优先级的事件处理器。</p><p><a href="https://github.com/facebook/react/blob/main/packages/react-dom/src/events/DOMPluginEventSystem.js" target="_blank" rel="noopener">源码地址</a></p><center><img src="事件绑定.png" width="70%" /></center><h5 id="事件触发"><a href="#事件触发" class="headerlink" title="事件触发"></a>事件触发</h5><p>触发某事件，触发对应的事件处理器如：DispatchDiscreteEvent (离散事件处理器)，从整个对于调用过程的进行追踪可以大致得到以下流程。</p><p><a href="https://github.com/facebook/react/blob/main/packages/react-dom/src/events/ReactDOMEventListener.js" target="_blank" rel="noopener">源码地址</a></p><center><img src="事件分发.png" width="70%" /></center><h3 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h3><p>1、DispatchEvent 是整个事件系统的核心，包含事件的注册、存储和执行；<br>2、React 事件系统通过代理统一的事件触发，来调度原生事件的触发；<br>3、React 事件系统的合成事件优先级影响着触发更新的优先级，决定了对应更新的更新时机；</p><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p><a href="https://www.yingpengsha.com/react-he-cheng-shi-jian-xi-tong-yuan-ma-jie-xi/" target="_blank" rel="noopener">React17 事件系统</a><br><a href="https://zh-hans.reactjs.org/blog/2020/08/10/react-v17-rc.html" target="_blank" rel="noopener">React更新日志</a><br><a href="https://juejin.cn/post/6863266370411298823#heading-7" target="_blank" rel="noopener">React16.x 版本的事件系统</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;零、从零开始&quot;&gt;&lt;a href=&quot;#零、从零开始&quot; class=&quot;headerlink&quot; title=&quot;零、从零开始&quot;&gt;&lt;/a&gt;零、从零开始&lt;/h3&gt;&lt;p&gt;在看下面 React 事件系统相关流程之前，我们先看看整个 React 渲染的大概流程；以便于后面更轻松地学</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="react、event" scheme="https://qiuysh.github.io/tags/react%E3%80%81event/"/>
    
  </entry>
  
  <entry>
    <title>React Diff 浅析</title>
    <link href="https://qiuysh.github.io/2021/07/21/ReactDiff%E6%B5%85%E6%9E%90/"/>
    <id>https://qiuysh.github.io/2021/07/21/ReactDiff%E6%B5%85%E6%9E%90/</id>
    <published>2021-07-21T14:09:44.000Z</published>
    <updated>2021-12-03T06:24:26.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>在虚拟 DOM 出现之前，我们通常都进行实际 DOM 操作，包括使用Jquery、kissy 和原生的方式来进行 DOM 和内容的增删改，来达到更新的目的。虚拟 DOM 出现后，数据驱动视图这种思想，慢慢替代了原先 DOM 操作的方式，而我们大多情况要做的往往就是维护数据的状态。</p><p>PS：需要的前置知识</p><ul><li>什么是 V-DOM?</li><li>什么是 Fiber？</li><li>React 更新流程？</li></ul><h3 id="二、正文"><a href="#二、正文" class="headerlink" title="二、正文"></a>二、正文</h3><h4 id="什么是-Diff-算法？"><a href="#什么是-Diff-算法？" class="headerlink" title="什么是 Diff 算法？"></a>什么是 Diff 算法？</h4><blockquote><p><strong>让 V-DOM 快起来的根本因素，用于更新虚拟 DOM 的变化部分的执行策略。</strong></p></blockquote><h4 id="Diff-算法的根本"><a href="#Diff-算法的根本" class="headerlink" title="Diff 算法的根本"></a>Diff 算法的根本</h4><ul><li><strong>传统的 Diff 算法</strong>通过循环递归对节点进行依次对比，这么做算法复杂度 O(n^3)；</li><li><strong>React Diff 三大策略</strong>可以将原本 O(n^3) 的复杂度降低到 O(n);</li></ul><p>以下是三大策略介绍：</p><h4 id="1、Tree-Diff"><a href="#1、Tree-Diff" class="headerlink" title="1、Tree Diff"></a>1、Tree Diff</h4><blockquote><p>** DOM 节点中跨层级的移动操作特别少，几乎可以忽略。**</p></blockquote><p>Tree 级别的 Diff 具体方案：</p><ul><li>可以通过 UpdateDepth 对 V-DOM 树进行层级控制。</li><li>对树进行分层比较，两树只进行同一层级节点比较，如节点不存在，则删除该节点及其子节点，不再进一步比较。</li><li>只需遍历一次就能完成整棵 DOM 树的比较。</li></ul><h4 id="2、Component-Diff"><a href="#2、Component-Diff" class="headerlink" title="2、Component Diff"></a>2、Component Diff</h4><blockquote><p><strong>拥有相同类的两个组件生成相似的树形结构，反之则不同。</strong></p></blockquote><p>Component 级别的 Diff 方案：</p><ul><li>相同类型组件：按层级比较 V-DOM 树；</li><li>不同类型组件：一个将被改变的组件判断为 Dirty Component，替换整个组件；</li></ul><h4 id="3、Element-Diff"><a href="#3、Element-Diff" class="headerlink" title="3、Element Diff"></a>3、Element Diff</h4><blockquote><p><strong>在对比同一层级的子节点时，通过唯一 key 区分。</strong></p></blockquote><p>Element 级别的 Diff 方案：</p><ul><li>插入：集合（A，B）中不存在组件C，组件C若要添加到集合中，组件C只需插入到集合中；</li><li>删除： <ul><li>集合（A，B，D）存在组件D，但D发生改变，不能复用和更新，所以集合中但D需要删除，重新创建；</li><li>集合（A，B，D）变成了新集合（A，B），组件D删除；</li></ul></li><li>移动：集合内组件位置发生变化，只需添加唯一key区分移动即可；</li></ul><h4 id="Diff-策略浅析"><a href="#Diff-策略浅析" class="headerlink" title="Diff 策略浅析"></a>Diff 策略浅析</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * diff算法核心部分</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>returnFiber </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>currentFirstChild </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>newChild 判断JSX类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>lanes </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconcileChildFibers</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    returnFiber: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">    currentFirstChild: Fiber | null,</span></span></span><br><span class="line"><span class="function"><span class="params">    newChild: any,</span></span></span><br><span class="line"><span class="function"><span class="params">    lanes: Lanes,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Fiber</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否对象</span></span><br><span class="line">    <span class="keyword">const</span> isObject = <span class="keyword">typeof</span> newChild === <span class="string">'object'</span> &amp;&amp; newChild !== <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isObject) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (newChild.$$<span class="keyword">typeof</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> REACT_ELEMENT_TYPE:</span><br><span class="line">          <span class="keyword">return</span> placeSingleChild(</span><br><span class="line">            reconcileSingleElement(</span><br><span class="line">              returnFiber,</span><br><span class="line">              currentFirstChild,</span><br><span class="line">              newChild,</span><br><span class="line">              lanes,</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">        ....</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组多节点</span></span><br><span class="line">    <span class="keyword">if</span> (isArray(newChild)) &#123;</span><br><span class="line">      <span class="keyword">return</span> reconcileChildrenArray(</span><br><span class="line">        returnFiber,</span><br><span class="line">        currentFirstChild,</span><br><span class="line">        newChild,</span><br><span class="line">        lanes,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除没有匹配上的节点</span></span><br><span class="line">    <span class="keyword">return</span> deleteRemainingChildren(returnFiber, currentFirstChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单节点-Diff"><a href="#单节点-Diff" class="headerlink" title="单节点 Diff"></a>单节点 Diff</h4><p>单节点的 Diff 实现逻辑较为简单<br>​</p><p><strong>1、主要流程</strong><br><img src="%E5%8D%95%E8%8A%82%E7%82%B9diff.png" alt="单节点diff.png"><br><strong>2、源代码</strong><br><strong>​</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 单节点diff逻辑</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>returnFiber </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>currentFirstChild </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>element </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>lanes </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">reconcileSingleElement</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">   returnFiber: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">   currentFirstChild: Fiber | null,</span></span></span><br><span class="line"><span class="function"><span class="params">   element: ReactElement,</span></span></span><br><span class="line"><span class="function"><span class="params">   lanes: Lanes,</span></span></span><br><span class="line"><span class="function"><span class="params"> </span>): <span class="title">Fiber</span> </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> key = element.key;</span><br><span class="line">   <span class="keyword">let</span> child = currentFirstChild;</span><br><span class="line">   <span class="comment">// 判断是否存在dom节点</span></span><br><span class="line">   <span class="keyword">while</span> (child !== <span class="literal">null</span>) &#123;</span><br><span class="line">     <span class="comment">// <span class="doctag">TODO:</span> If key === null and child.key === null, then this only applies to</span></span><br><span class="line">     <span class="comment">// the first item in the list.</span></span><br><span class="line">     <span class="comment">// 是否存在相同的key</span></span><br><span class="line">     <span class="keyword">if</span> (child.key === key) &#123;</span><br><span class="line">       <span class="comment">// 类型是否相同</span></span><br><span class="line">       <span class="keyword">switch</span> (child.tag) &#123;</span><br><span class="line">         <span class="keyword">case</span> Fragment: &#123;</span><br><span class="line">           ...</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">case</span> Block:</span><br><span class="line">           </span><br><span class="line">         <span class="comment">// We intentionally fallthrough here if enableBlocksAPI is not on.</span></span><br><span class="line">         <span class="comment">// eslint-disable-next-lined no-fallthrough</span></span><br><span class="line">         <span class="keyword">default</span>: &#123;</span><br><span class="line">           <span class="comment">// 类型相同，可以复用</span></span><br><span class="line">           <span class="keyword">if</span> (</span><br><span class="line">             child.elementType === element.type ||</span><br><span class="line">             <span class="comment">// Keep this check inline so it only runs on the false path:</span></span><br><span class="line">             (__DEV__</span><br><span class="line">               ? isCompatibleFamilyForHotReloading(child, element)</span><br><span class="line">               : <span class="literal">false</span>)</span><br><span class="line">           ) &#123;</span><br><span class="line">             deleteRemainingChildren(returnFiber, child.sibling);</span><br><span class="line">             <span class="keyword">const</span> existing = useFiber(child, element.props);</span><br><span class="line">             existing.ref = coerceRef(returnFiber, child, element);</span><br><span class="line">             <span class="comment">// 返回复用fiber</span></span><br><span class="line">             existing.return = returnFiber;</span><br><span class="line">             <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">               existing._debugSource = element._source;</span><br><span class="line">               existing._debugOwner = element._owner;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> existing;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// key相同，类型不匹配，对应fiber为删除状态</span></span><br><span class="line">       deleteRemainingChildren(returnFiber, child);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// key不同fiber标记为删除状态</span></span><br><span class="line">       deleteChild(returnFiber, child);</span><br><span class="line">     &#125;</span><br><span class="line">     child = child.sibling;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 创建新的fragment fiber</span></span><br><span class="line">   <span class="keyword">if</span> (element.type === REACT_FRAGMENT_TYPE) &#123;</span><br><span class="line">     <span class="keyword">const</span> created = createFiberFromFragment(</span><br><span class="line">       element.props.children,</span><br><span class="line">       returnFiber.mode,</span><br><span class="line">       lanes,</span><br><span class="line">       element.key,</span><br><span class="line">     );</span><br><span class="line">     created.return = returnFiber;</span><br><span class="line">     <span class="keyword">return</span> created;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// 创建新的iber节点</span></span><br><span class="line">     <span class="keyword">const</span> created = createFiberFromElement(element, returnFiber.mode, lanes);</span><br><span class="line">     created.ref = coerceRef(returnFiber, currentFirstChild, element);</span><br><span class="line">     created.return = returnFiber;</span><br><span class="line">     <span class="keyword">return</span> created;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="多节点Diff"><a href="#多节点Diff" class="headerlink" title="多节点Diff"></a>多节点Diff</h4><p>多节点的 Diff 比之单节点复杂了很多，主要涉及以下四个操作：</p><ul><li>更新节点</li><li>新增节点</li><li>删除节点</li><li>移动节点</li></ul><p><strong>1、主要流程</strong></p><p><img src="%E5%A4%9A%E8%8A%82%E7%82%B9diff.png" alt="多节点diff.png"></p><p><strong>2、源代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconcileChildrenArray</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    returnFiber: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">    currentFirstChild: Fiber | null,</span></span></span><br><span class="line"><span class="function"><span class="params">    newChildren: Array&lt;*&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">    lanes: Lanes,</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">Fiber</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 新fiber链表的第一个fiber</span></span><br><span class="line">    <span class="keyword">let</span> resultingFirstChild: Fiber | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> previousNewFiber: Fiber | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 和新的child比较</span></span><br><span class="line">    <span class="keyword">let</span> oldFiber = currentFirstChild;</span><br><span class="line">    <span class="comment">// 存储固定节点位置</span></span><br><span class="line">    <span class="keyword">let</span> lastPlacedIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 遍历到新节点的索引</span></span><br><span class="line">    <span class="keyword">let</span> newIdx = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 遍历到oldFiber的下一个节点</span></span><br><span class="line">    <span class="keyword">let</span> nextOldFiber = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/******** 第一次遍历  更新节点 ********/</span> </span><br><span class="line">    <span class="keyword">for</span> (; oldFiber !== <span class="literal">null</span> &amp;&amp; newIdx &lt; newChildren.length; newIdx++) &#123;</span><br><span class="line">      <span class="comment">// newChildren小于oldFiber，中断遍历</span></span><br><span class="line">      <span class="keyword">if</span> (oldFiber.index &gt; newIdx) &#123;</span><br><span class="line">        nextOldFiber = oldFiber;</span><br><span class="line">        oldFiber = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 存储当前遍历到到oldFiber的下一个节点</span></span><br><span class="line">        nextOldFiber = oldFiber.sibling;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 更新Fiber</span></span><br><span class="line">      <span class="keyword">const</span> newFiber = updateSlot(</span><br><span class="line">        returnFiber,</span><br><span class="line">        oldFiber,</span><br><span class="line">        newChildren[newIdx],</span><br><span class="line">        lanes,</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 节点不可复用 key或tag，中断遍历</span></span><br><span class="line">      <span class="keyword">if</span> (newFiber === <span class="literal">null</span>) &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> (oldFiber === <span class="literal">null</span>) &#123;</span><br><span class="line">          oldFiber = nextOldFiber;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (shouldTrackSideEffects) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldFiber &amp;&amp; newFiber.alternate === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// We matched the slot, but we didn't reuse the existing fiber, so we</span></span><br><span class="line">          <span class="comment">// need to delete the existing child.</span></span><br><span class="line">          deleteChild(returnFiber, oldFiber);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 记录固定节点位置</span></span><br><span class="line">      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);</span><br><span class="line">      <span class="comment">// fiber连接sibling连成sibling位置的，单向链表</span></span><br><span class="line">      <span class="keyword">if</span> (previousNewFiber === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Move out of the loop. This only happens for the first run.</span></span><br><span class="line">        resultingFirstChild = newFiber;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Defer siblings if we're not at the right index for this slot.</span></span><br><span class="line">        <span class="comment">// I.e. if we had null values before, then we want to defer this</span></span><br><span class="line">        <span class="comment">// for each null value. However, we also don't want to call updateSlot</span></span><br><span class="line">        <span class="comment">// with the previous one.</span></span><br><span class="line">        previousNewFiber.sibling = newFiber;</span><br><span class="line">      &#125;</span><br><span class="line">      previousNewFiber = newFiber;</span><br><span class="line">      oldFiber = nextOldFiber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/******** 删除节点  *********/</span></span><br><span class="line">    <span class="keyword">if</span> (newIdx === newChildren.length) &#123;</span><br><span class="line">      <span class="comment">// We've reached the end of the new children. We can delete the rest.</span></span><br><span class="line">      deleteRemainingChildren(returnFiber, oldFiber);</span><br><span class="line">      <span class="keyword">return</span> resultingFirstChild;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/******** 第二次遍历 新增节点  *********/</span></span><br><span class="line">    <span class="keyword">if</span> (oldFiber === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 在老节点遍历完，还有新节点没遍历的情况，就创建新节点</span></span><br><span class="line">      <span class="keyword">for</span> (; newIdx &lt; newChildren.length; newIdx++) &#123;</span><br><span class="line">        <span class="comment">// 创建Fiber节点</span></span><br><span class="line">        <span class="keyword">const</span> newFiber = createChild(returnFiber, newChildren[newIdx], lanes);</span><br><span class="line">        <span class="keyword">if</span> (newFiber === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);</span><br><span class="line">        <span class="keyword">if</span> (previousNewFiber === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span> Move out of the loop. This only happens for the first run.</span></span><br><span class="line">          resultingFirstChild = newFiber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//  sibling链接兄弟节点</span></span><br><span class="line">          previousNewFiber.sibling = newFiber;</span><br><span class="line">        &#125;</span><br><span class="line">        previousNewFiber = newFiber;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resultingFirstChild;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add all children to a key map for quick lookups.</span></span><br><span class="line">    <span class="keyword">const</span> existingChildren = mapRemainingChildren(returnFiber, oldFiber);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/******** 第三次遍历 移动节点  **********/</span></span><br><span class="line">    <span class="keyword">for</span> (; newIdx &lt; newChildren.length; newIdx++) &#123;</span><br><span class="line">      <span class="keyword">const</span> newFiber = updateFromMap(</span><br><span class="line">        existingChildren,</span><br><span class="line">        returnFiber,</span><br><span class="line">        newIdx,</span><br><span class="line">        newChildren[newIdx],</span><br><span class="line">        lanes,</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (newFiber !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldTrackSideEffects) &#123;</span><br><span class="line">          <span class="keyword">if</span> (newFiber.alternate !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// The new fiber is a work in progress, but if there exists a</span></span><br><span class="line">            <span class="comment">// current, that means that we reused the fiber. We need to delete</span></span><br><span class="line">            <span class="comment">// it from the child list so that we don't add it to the deletion</span></span><br><span class="line">            <span class="comment">// list.</span></span><br><span class="line">            existingChildren.delete(</span><br><span class="line">              newFiber.key === <span class="literal">null</span> ? newIdx : newFiber.key,</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 移动节点</span></span><br><span class="line">        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);</span><br><span class="line">        <span class="keyword">if</span> (previousNewFiber === <span class="literal">null</span>) &#123;</span><br><span class="line">          resultingFirstChild = newFiber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          previousNewFiber.sibling = newFiber;</span><br><span class="line">        &#125;</span><br><span class="line">        previousNewFiber = newFiber;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resultingFirstChild;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><ul><li>Diff 时 key 和 type 确定了 Fiber 节点能否复用；</li><li>Diff 中的三大策略是 Diff 算法的根本，而 Diff 算法又是 V-DOM 大行其道的主要两大因素之一；</li></ul><h3 id="四、推荐"><a href="#四、推荐" class="headerlink" title="四、推荐"></a>四、推荐</h3><p>如何编写一个简易的 react： <a href="//pomb.us/build-your-own-react/" target="_blank" rel="noopener">Build your own React</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;在虚拟 DOM 出现之前，我们通常都进行实际 DOM 操作，包括使用Jquery、kissy 和原生的方式来进行 DOM 和</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="react、diff" scheme="https://qiuysh.github.io/tags/react%E3%80%81diff/"/>
    
  </entry>
  
  <entry>
    <title>React 源码结构设计</title>
    <link href="https://qiuysh.github.io/2021/05/09/React%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>https://qiuysh.github.io/2021/05/09/React%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-05-09T02:22:29.000Z</published>
    <updated>2021-12-03T06:24:10.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、reactv16之前的架构"><a href="#一、reactv16之前的架构" class="headerlink" title="一、reactv16之前的架构"></a>一、reactv16之前的架构</h3><p>reactv15的架构可分为两部分：</p><ul><li>reconciler（协调器） - 负责找出变化组件</li><li>renderer（渲染器） - 负责将变化的组件渲染到页面</li></ul><p>在React中可以通过this.setState、this.forceUpdate、ReactDOM.render等API触发更新。</p><h4 id="reconciler"><a href="#reconciler" class="headerlink" title="reconciler"></a>reconciler</h4><p>每当有更新发生时，reconciler会如下工作：</p><ul><li>调用函数组件、或者render方法，将返回的jsx转化成v-dom</li><li>将v-dom和上次更新时到v-dom对比</li><li>通过对比找出本次更新中变化到v-dom</li><li>通知renderer将变化v-dom渲染到页面</li></ul><h4 id="renderer"><a href="#renderer" class="headerlink" title="renderer"></a>renderer</h4><p>不同到平台有不同到渲染器，react-dom、react-native、react-art和react-test等。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>reconciler在，mount组件会调用mountComponent,update的组件会调用updateComponent。者两个方法都会递归更新子组件。</p><p>由于递归执行，所以一旦开始，中途就无法中断，当层级很深时，递归更新超过16ms,用户交互就会卡顿。</p><h3 id="二、reactv16的架构"><a href="#二、reactv16的架构" class="headerlink" title="二、reactv16的架构"></a>二、reactv16的架构</h3><p>react16的架构可分为三层：</p><ul><li>scheduler（调度器）- 调度任务的优先级，高优任务先进入reconciler</li><li>reconciler（协调器）- 负责找出变化的组件</li><li>renderer（渲染器）- 负责将变化的组件渲染到页面上</li></ul><h4 id="scheduler"><a href="#scheduler" class="headerlink" title="scheduler"></a>scheduler</h4><p>由于部分浏览器requestIdleCallback这个api兼容性和触发频率不稳定到问题，react放弃浏览器的该api。<br>基于这个原因react实现了功能更完备的requestIdleCallback polyfill，也就是scheduler。除了在空闲时触发回调的功能外，Scheduler还提供了多种调度优先级供任务设置。</p><h4 id="reconclier"><a href="#reconclier" class="headerlink" title="reconclier"></a>reconclier</h4><p>react16的reconciler的更新工作从递归变成了可以中断的循环过程。具体表现在每次循环都会调用shouldYield判断当前是否有剩余时间。</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@noinline </span>*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workLoopConcurrent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Perform work until Scheduler asks us to yield</span></span><br><span class="line">  <span class="keyword">while</span> (workInProgress !== <span class="literal">null</span> &amp;&amp; !shouldYield()) &#123;</span><br><span class="line">    performUnitOfWork(workInProgress);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么React16是如何解决中断更新时DOM渲染不完全的问题呢？</p><p>在React16中，Reconciler与Renderer不再是交替工作。当Scheduler将任务交给Reconciler后，Reconciler会为变化的虚拟DOM打上代表增/删/更新的标记，<br>类似这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Placement = <span class="comment">/*                    */</span> <span class="number">0b000000000000000010</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Update = <span class="comment">/*                       */</span> <span class="number">0b000000000000000100</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PlacementAndUpdate = <span class="comment">/*           */</span> <span class="number">0b000000000000000110</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Deletion = <span class="comment">/*                     */</span> <span class="number">0b000000000000001000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ContentReset = <span class="comment">/*                 */</span> <span class="number">0b000000000000010000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Callback = <span class="comment">/*                     */</span> <span class="number">0b000000000000100000</span>;</span><br></pre></td></tr></table></figure><p>整个scheduler与reconciler的工作都在内存中进行，只有当所有的组件都完成reconciler的工作，才会统一交给renderer。</p><h4 id="renderer-1"><a href="#renderer-1" class="headerlink" title="renderer"></a>renderer</h4><p>renderer根据reconciler为v-dom打的标记，同步执行对应组件更新。</p><h3 id="墙裂推荐资料"><a href="#墙裂推荐资料" class="headerlink" title="墙裂推荐资料"></a>墙裂推荐资料</h3><p><a href="https://react.iamkasong.com/preparation/newConstructure.html" target="_blank" rel="noopener">React技术揭秘</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、reactv16之前的架构&quot;&gt;&lt;a href=&quot;#一、reactv16之前的架构&quot; class=&quot;headerlink&quot; title=&quot;一、reactv16之前的架构&quot;&gt;&lt;/a&gt;一、reactv16之前的架构&lt;/h3&gt;&lt;p&gt;reactv15的架构可分为两部分：</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="React、Fiber" scheme="https://qiuysh.github.io/tags/React%E3%80%81Fiber/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存机制</title>
    <link href="https://qiuysh.github.io/2021/03/02/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>https://qiuysh.github.io/2021/03/02/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</id>
    <published>2021-03-02T02:13:11.000Z</published>
    <updated>2021-12-03T06:22:39.009Z</updated>
    
    <content type="html"><![CDATA[<h4 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h4><ul><li>service worker（https）</li><li>memory cache(不受 Cache-Control 的值影响)</li><li>disk cache</li><li>push cache(属于 http2 的功能，不受 http header 控制)</li></ul><p>注意 disk cache：</p><p>1、对于大文件来说，大概率是不存储在内存中的，反之优先</p><p>2、当前系统内存使用率高的话，文件优先存储进硬盘</p><h4 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h4><center><img src="cache.png" height="200px" /></center><h4 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h4><p>强缓存：不会向服务器发送请求，直接从缓存中读取资源，在 chrome 控制台的 Network 选项中可以看到该请求返回200的状态码，并且Size 显示 from disk cache 或 from memory cache。强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control。</p><p>其实这两者差别不大，区别就在于 Expires 是 http1.0 的产物，Cache-Control 是 http1.1 的产物，两者同时存在的话，Cache-Control 优先级高于 Expires；在某些不支持 HTTP1.1 的环境下，Expires 就会发挥用处。所以 Expires 其实是过时的产物，现阶段它的存在只是一种兼容性的写法。</p><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：</p><ul><li>协商缓存生效，返回 304 和 Not Modified；</li><li>协商缓存失效，返回 200 和请求结果；</li></ul><p>协商缓存可以通过设置两种 HTTP Header 实现：Last-Modified 和 ETag 。</p><p>但是 Last-Modified 存在一些弊端：</p><ul><li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源</li><li>因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源</li></ul><p>ETag 和If-None-Match 可以直接根据文件内容是否修改来决定缓存策略。</p><p>首先在精确度上，Etag 要优于 Last-Modified。<br>Last-Modified 的时间单位是秒，如果某个文件在1秒内改变了多次，那么他们的 Last-Modified 其实并没有体现出来修改，但是 Etag 每次都会改变确保了精度；如果是负载均衡的服务器，各个服务器生成的Last-Modified也有可能不一致。</p><p>第二在性能上，Etag 要逊于 Last-Modified，毕竟 Last-Modified 只需要记录时间，而 Etag 需要服务器通过算法来计算出一个 hash值。<br>第三在优先级上，服务器校验优先考虑 Etag</p><p><a href="https://www.jianshu.com/p/54cc04190252" target="_blank" rel="noopener">深入理解浏览器的缓存机制</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;缓存位置&quot;&gt;&lt;a href=&quot;#缓存位置&quot; class=&quot;headerlink&quot; title=&quot;缓存位置&quot;&gt;&lt;/a&gt;缓存位置&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;service worker（https）&lt;/li&gt;
&lt;li&gt;memory cache(不受 Cache-Con</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="浏览器" scheme="https://qiuysh.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Babel 之 AST</title>
    <link href="https://qiuysh.github.io/2020/12/15/babel%E4%B9%8Bast/"/>
    <id>https://qiuysh.github.io/2020/12/15/babel%E4%B9%8Bast/</id>
    <published>2020-12-15T14:19:16.000Z</published>
    <updated>2021-12-03T06:23:09.110Z</updated>
    
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="babel、AST" scheme="https://qiuysh.github.io/tags/babel%E3%80%81AST/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 入门</title>
    <link href="https://qiuysh.github.io/2020/11/23/nginx%E5%85%A5%E9%97%A8/"/>
    <id>https://qiuysh.github.io/2020/11/23/nginx%E5%85%A5%E9%97%A8/</id>
    <published>2020-11-23T13:09:57.000Z</published>
    <updated>2021-12-03T06:23:44.477Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx?"></a>nginx?</h4><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。</p><h4 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户权限</span></span><br><span class="line">user  root;</span><br><span class="line">http &#123;</span><br><span class="line">    <span class="built_in">..</span>.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="keepalive"><a href="#keepalive" class="headerlink" title="keepalive"></a>keepalive</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># keepalive_timeout  <span class="number">0</span>;</span><br><span class="line">keepalive_timeout  <span class="number">65</span>;</span><br></pre></td></tr></table></figure><h4 id="gzip配置"><a href="#gzip配置" class="headerlink" title="gzip配置"></a>gzip配置</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gzip压缩开关</span></span><br><span class="line">gzip  <span class="keyword">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#压缩文件类型</span></span><br><span class="line">gzip_types <span class="built_in">text</span>/plain <span class="built_in">application</span>/javascript <span class="built_in">application</span>/json;</span><br><span class="line"></span><br><span class="line">gzip_vary <span class="keyword">on</span>;</span><br></pre></td></tr></table></figure><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="built_in">..</span>.</span><br><span class="line">    upstream test &#123;</span><br><span class="line">        # ip_hash; 根据ip分配请求</span><br><span class="line">       <span class="built_in"> server </span>0.0.0.0:9000;</span><br><span class="line">       <span class="built_in"> server </span>0.0.0.0:9001; </span><br><span class="line">        # 加权</span><br><span class="line">       <span class="built_in"> server </span>0.0.0.0:9002 <span class="attribute">weight</span>=1; </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in"> server </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">        #监听端口</span></span><br><span class="line">        <span class="attr">listen</span>       <span class="string">8080;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">        #定义使用主机</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">localhost 本地地址;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">        #编码格式</span></span><br><span class="line">        <span class="attr">charset</span> <span class="string">utf-8;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">        #access_log  logs/host.access.log  main;</span></span><br><span class="line">    </span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">            <span class="attr">root</span>   <span class="string">/xxx/dist;</span></span><br><span class="line">            <span class="attr">index</span>  <span class="string">index.html index.htm;</span></span><br><span class="line"><span class="comment">            # 处理BrowserRouter类型路由</span></span><br><span class="line">            <span class="attr">try_files</span> <span class="string">$uri /index.html;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    </span><br><span class="line">        <span class="attr">location</span> <span class="string">~ \.(gif|jpg|png|jpeg|svg|eot|ttf|woff|css|js)$ &#123;</span></span><br><span class="line">            <span class="attr">root</span>   <span class="string">/Users/wulin/Desktop/projects/dtlogstatic/dist;</span></span><br><span class="line">            <span class="attr">expires</span> <span class="string">7d;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    </span><br><span class="line">        <span class="attr">location</span> <span class="string">/log/xxx/1 &#123;</span></span><br><span class="line">            <span class="attr">proxy_set_header</span> <span class="string">X-Real-IP $remote_addr;</span></span><br><span class="line">            <span class="attr">proxy_set_header</span> <span class="string">X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line">            <span class="attr">proxy_set_header</span> <span class="string">Host  $http_host;</span></span><br><span class="line">            <span class="attr">proxy_set_header</span> <span class="string">X-Nginx-Proxy true;</span></span><br><span class="line">            <span class="attr">proxy_set_header</span> <span class="string">Connection "";</span></span><br><span class="line">            <span class="attr">proxy_pass</span>   <span class="string">http://xxx;  #****这里填上服务器地址</span></span><br><span class="line">            <span class="attr">proxy_redirect</span> <span class="string">default ;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    </span><br><span class="line">        <span class="attr">location</span> <span class="string">/log/xxx/2 &#123;</span></span><br><span class="line">            <span class="attr">...</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="配置资料"><a href="#配置资料" class="headerlink" title="配置资料"></a>配置资料</h4><p><a href="https://www.jianshu.com/p/026d67cc6cb1" target="_blank" rel="noopener">https://www.jianshu.com/p/026d67cc6cb1</a></p><p><a href="https://www.cnblogs.com/tandaxia/p/8810648.html" target="_blank" rel="noopener">https://www.cnblogs.com/tandaxia/p/8810648.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;nginx&quot;&gt;&lt;a href=&quot;#nginx&quot; class=&quot;headerlink&quot; title=&quot;nginx?&quot;&gt;&lt;/a&gt;nginx?&lt;/h4&gt;&lt;p&gt;Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="nginx" scheme="https://qiuysh.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Babel 插件浅析</title>
    <link href="https://qiuysh.github.io/2020/09/12/babel%E6%8F%92%E4%BB%B6%E6%B5%85%E6%9E%90/"/>
    <id>https://qiuysh.github.io/2020/09/12/babel%E6%8F%92%E4%BB%B6%E6%B5%85%E6%9E%90/</id>
    <published>2020-09-12T15:00:37.000Z</published>
    <updated>2021-12-03T06:23:02.496Z</updated>
    
    <content type="html"><![CDATA[<h4 id="babel-preset-env"><a href="#babel-preset-env" class="headerlink" title="@babel/preset-env"></a>@babel/preset-env</h4><p>@babel/preset-env 是 Babel6 时代 babel-preset-latest 的增强版。这个包除了进行语法转换，该预设还可以通过设置参数项进行针对性语法转换以及 polyfill 的部分引入。我们在 Babel 配置文件里指定使用它。如果不使用的话，也可以完成转码，但转码后的代码仍然是 ES6 的，相当于没有转码。</p><blockquote><p>重点需要掌握的参数项：targets、useBuiltIns、modules和corejs。</p></blockquote><h5 id="1、targets"><a href="#1、targets" class="headerlink" title="1、targets"></a>1、targets</h5><p>该参数项可以取值为字符串、字符串数组或对象，不设置的时候取默认值空对象{}。</p><p>该参数项的写法与 browserslist 是一样的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"presets"</span>: [ </span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/preset-env"</span>, </span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"targets"</span>: &#123;</span><br><span class="line">          <span class="string">"browsers"</span>: [<span class="string">"last 2 versions"</span>, <span class="string">"safari &gt;= 7"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们对 @babel/preset-env 的 targets 参数项进行了设置，那么就不使用 browserslist 的配置，而是使用 targets 的配置。如不设置 targets，那么就使用 browserslist 的配置。如果 targets 不配置，browserslist 也没有配置，那么 @babel/preset-env 就对所有 ES6 语法转换成 ES5 的。</p><p>正常情况下，我们推荐使用 browserslist 的配置而很少单独配置 @babel/preset-env 的 targets。</p><h5 id="2、useBuiltIns"><a href="#2、useBuiltIns" class="headerlink" title="2、useBuiltIns"></a>2、useBuiltIns</h5><p>useBuiltIns 项取值可以是”usage”（7.4版本后稳定） 、 “entry” 或 false。如果该项不进行设置，则取默认值 false。</p><p>useBuiltIns 这个参数项主要和 polyfill 的行为有关。在我们没有配置该参数项或是取值为 false 的时候，polyfill 会全部引入到最终的代码里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"presets"</span>: [ </span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/preset-env"</span>, </span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"useBuiltIns"</span>: xxx, <span class="comment">// entry、usage、false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‘entry’ 与’usage’ 的区别：</p><ul><li>‘entry’这种方式不会根据我们实际用到的API进行针对性引入polyfill，而’usage’可以做到。</li><li>‘entry’需要我们在项目入口处手动引入 polyfill，而’usage’不需要。</li></ul><h5 id="3、corejs"><a href="#3、corejs" class="headerlink" title="3、corejs"></a>3、corejs</h5><p>该参数项的取值可以是2或3，没有设置的时候取默认值为2（还有一种对象 proposals 取值方法，我们实际用不到，忽略掉即可）这个参数项只有useBuiltIns设置为’usage’或’entry’时，才会生效。</p><h5 id="4、modules"><a href="#4、modules" class="headerlink" title="4、modules"></a>4、modules</h5><p>这个参数项的取值可以是”amd”、”umd” 、 “systemjs” 、 “commonjs” 、”cjs” 、”auto” 、false。在不设置的时候，取默认值”auto”。</p><p>该项用来设置是否把ES6的模块化语法改成其它模块化语法。</p><p>我们常见的模块化语法有两种：（1）ES6的模块法语法用的是 import 与 export；（2）commonjs模块化语法是 require 与 module.exports。</p><p>在该参数项值是’auto’或不设置的时候，会发现我们转码前的代码里import都被转码成require了。</p><p>如果我们将参数项改成false，那么就不会对ES6模块化进行更改，还是使用import引入模块。</p><p>使用ES6模块化语法有什么好处呢。在使用Webpack一类的打包工具，可以进行静态分析，从而可以做tree shaking 等优化措施。</p><h4 id="babel-plugin-transform-runtime"><a href="#babel-plugin-transform-runtime" class="headerlink" title="@babel/plugin-transform-runtime"></a>@babel/plugin-transform-runtime</h4><p>三大作用：</p><ul><li><p>自动移除语法转换后内联的辅助函数（inline Babel helpers），使用@babel/runtime/helpers里的辅助函数来替代；</p></li><li><p>当代码里使用了core-js的API，自动引入@babel/runtime-corejs3/core-js-stable/，以此来替代全局引入的core-js/stable;</p></li><li><p>当代码里使用了Generator/async函数，自动引入@babel/runtime/regenerator，以此来替代全局引入的regenerator-runtime/runtime；</p></li></ul><blockquote><p>主要的配置项：helpers、corejs、regenerator、useESModules、absoluteRuntime和version。</p></blockquote><h5 id="helpers"><a href="#helpers" class="headerlink" title="helpers"></a>helpers</h5><p>该项是用来设置是否要自动引入辅助函数包，这个我们当然要引入了，这是@babel/plugin-transform-runtime的核心用途。该项取值是布尔值，我们设置为true，其默认值也是true，所以也可以省略不填。</p><h5 id="corejs和regenerator"><a href="#corejs和regenerator" class="headerlink" title="corejs和regenerator"></a>corejs和regenerator</h5><p>这两项是用来设置是否做API转换以避免污染全局环境，regenerator取值是布尔值，corejs取值是false、2和3。这个上一节已经讲过了，在前端业务项目里，我们一般对corejs取false，即不对Promise这一类的API进行转换。而在开发JS库的时候设置为2或3。regenerator取默认的true就可以</p><h5 id="useESModules"><a href="#useESModules" class="headerlink" title="useESModules"></a>useESModules</h5><p>该项用来设置是否使用ES6的模块化用法，取值是布尔值。默认是fasle，在用webpack一类的打包工具的时候，我们可以设置为true，以便做静态分析。</p><h5 id="absoluteRuntime"><a href="#absoluteRuntime" class="headerlink" title="absoluteRuntime"></a>absoluteRuntime</h5><p>该项用来自定义@babel/plugin-transform-runtime引入@babel/runtime/模块的路径规则，取值是布尔值或字符串。没有特殊需求，我们不需要修改，保持默认false即可。</p><h5 id="version"><a href="#version" class="headerlink" title="version"></a>version</h5><p>该项主要是和@babel/runtime及其进化版@babel/runtime-corejs2、@babel/runtime-corejs3的版本号有关系，这三个包我们只需要根据需要安装一个。我们把安装的npm包的版本号设置给version即可。例如，在上节的babel14例子里，安装的@babel/runtime-corejs3版本是’^7.10.4’，那么配置项version也取’^7.10.4’。<br>其实该项不填取默认值就行，目前填写版本号主要是可以减少打包体积。</p><p>@babel/polyfill 无法提供 core-js@2 向 core-js@3 过渡</p><p><a href="https://segmentfault.com/a/1190000020237817" target="_blank" rel="noopener">Babel7 转码（五）- corejs3 的更新</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;babel-preset-env&quot;&gt;&lt;a href=&quot;#babel-preset-env&quot; class=&quot;headerlink&quot; title=&quot;@babel/preset-env&quot;&gt;&lt;/a&gt;@babel/preset-env&lt;/h4&gt;&lt;p&gt;@babel/prese</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="babel" scheme="https://qiuysh.github.io/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>Babel 的认知篇</title>
    <link href="https://qiuysh.github.io/2020/07/26/babel%E7%9A%84%E8%AE%A4%E7%9F%A5%E7%AF%87/"/>
    <id>https://qiuysh.github.io/2020/07/26/babel%E7%9A%84%E8%AE%A4%E7%9F%A5%E7%AF%87/</id>
    <published>2020-07-26T06:28:04.000Z</published>
    <updated>2021-12-03T06:23:05.900Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Babel-是一个-JavaScript-编译器"><a href="#Babel-是一个-JavaScript-编译器" class="headerlink" title="Babel 是一个 JavaScript 编译器"></a>Babel 是一个 JavaScript 编译器</h4><p>babel 默认只转换新的js语法，而不转换新的 API，，比如 Iterator, Generator, Set, Maps, Proxy, Reflect, Symbol,Promise 等全局对象。以及一些在全局对象上的方法(比如 Object.assign)都不会转码。</p><p>基本知识：</p><ul><li>babel 的作用是转换 JS 新的特性代码为大部分浏览器能运行的代码。</li><li>babel 转码又分为两部分，一个是语法转换，一个是 API 转换。</li><li>对于 API 的转换又分为两部分，一个是全局 API 例如 Promise，Set，Map 还有静态方法 Object.assign，另一个是实例方法例如Array.prototype.includes。对于实例方法 core-js@2 是转换不了的，只有 core-js@3 才会转换。</li><li>babel 代码转换依赖 plugin，没有 plugin 的情况下 babel 做的事情只是 code =&gt; code。</li><li>plugin 有很多，一个个导入又特别麻烦，这时候我们又知道了preset</li></ul><p>注意：preset 是从右往左执行，plugin 是从左往右执行，并且 plugin 先于 preset 执行</p><h4 id="babelrc配置介绍"><a href="#babelrc配置介绍" class="headerlink" title=".babelrc配置介绍"></a>.babelrc配置介绍</h4><p>主要对预设( presets )和插件( plugins )对配置。</p><p>1、plugins 告诉 babel 要使用哪些插件，控制如何转换代码。</p><p>如：babel-polyfill,babel-runtime,babel-transform-runtime等。</p><p>2、presets 属性告诉 Babel 要转换的源码使用了哪些新的语法特性，presets 是一组 Plugins 的集合。</p><p>如： babel-preset-env</p><p>babel-preset-env 相当于 babel-preset-latest 它会根据目标环境选择不支持的新特性来转译。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) 支持每个浏览器最后两个版本和 safari 大于等于 <span class="number">7</span> 版本所需的 polyfill 代码转换，我们可以如下配置：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'presets'</span>: [</span><br><span class="line">    [<span class="string">'env'</span>, &#123;</span><br><span class="line">      <span class="string">'target'</span>: &#123;</span><br><span class="line">        <span class="string">'browsers'</span>: [<span class="string">'last 2 versions'</span>, <span class="string">'safari &gt;= 7'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">(<span class="number">2</span>) 支持市场份额超过<span class="number">5</span>%的浏览器，可以如下配置</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'presets'</span>: [</span><br><span class="line">    [<span class="string">'env'</span>, &#123;</span><br><span class="line">      <span class="string">'target'</span>: &#123;</span><br><span class="line">        <span class="string">'browsers'</span>: <span class="string">'&gt; 5%'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.ruanyifeng.com/blog/2016/01/babel.html" target="_blank" rel="noopener">Babel 入门教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Babel-是一个-JavaScript-编译器&quot;&gt;&lt;a href=&quot;#Babel-是一个-JavaScript-编译器&quot; class=&quot;headerlink&quot; title=&quot;Babel 是一个 JavaScript 编译器&quot;&gt;&lt;/a&gt;Babel 是一个 Java</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="babel、es6" scheme="https://qiuysh.github.io/tags/babel%E3%80%81es6/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 JS 异步编程</title>
    <link href="https://qiuysh.github.io/2020/06/07/%E6%B5%85%E8%B0%88js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>https://qiuysh.github.io/2020/06/07/%E6%B5%85%E8%B0%88js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</id>
    <published>2020-06-07T03:57:10.000Z</published>
    <updated>2021-12-03T06:22:44.485Z</updated>
    
    <content type="html"><![CDATA[<p>JS 的单线程特性就意味着所有的执行任务需要进行排队，随即便有了同步（阻塞）和异步（非阻塞）两种任务。</p><h6 id="一、那么异步任务是怎么执行的呢？"><a href="#一、那么异步任务是怎么执行的呢？" class="headerlink" title="一、那么异步任务是怎么执行的呢？"></a>一、那么异步任务是怎么执行的呢？</h6><p>那么先来看看异步的执行机制</p><p>进入执行栈的分为：同步和异步两种任务，同步任务直接执行获取结果，异步执行任务并把对应的回调放入到任务队列中。</p><center><img src="lc1x.png" width="70%" /></center><center>图一</center><p>异步任务又分为两种：宏任务（如：setTimeOut）和微任务（如：promise），两种任务处于不同的任务队列，微任务的优先级高于宏任务，会优先执行完当前队列中的所有的微任务再执行宏任务。</p><center><img src="lc2x.png" width="70%" /></center><center>图二</center><h6 id="二、异步发展历史"><a href="#二、异步发展历史" class="headerlink" title="二、异步发展历史"></a>二、异步发展历史</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">回调 -&gt; 监听 -&gt; 订阅&#x2F;发布 -&gt; promise -&gt; generators -&gt; async&#x2F;await</span><br></pre></td></tr></table></figure><h6 id="三、各种的特性"><a href="#三、各种的特性" class="headerlink" title="三、各种的特性"></a>三、各种的特性</h6><p><strong>1、回调</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 回调</span></span><br><span class="line">fs.readFile(<span class="string">"demo.txt"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2、事件监听</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"xxx"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>3、订阅/发布</strong></p><p>某种意义上事件监听也属于订阅分布模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"xxx"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4、promise</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileContext</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(path, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">      resolve(data.toString())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、generators</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">generatorRead</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> getFileContext(<span class="string">"demo.txt"</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> gen = generatorRead().next();</span><br><span class="line">gen.value.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"generator"</span>, data)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、async/await</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  async</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncRead</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">await</span> getFileContext(<span class="string">"demo.txt"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"async"</span>, result);</span><br><span class="line">&#125;</span><br><span class="line">asyncRead();</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://developer.mozilla.org/zh-CN/docs/learn/JavaScript/%E5%BC%82%E6%AD%A5" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/learn/JavaScript/%E5%BC%82%E6%AD%A5</a><br><a href="https://zhuanlan.zhihu.com/p/26567159" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26567159</a><br><a href="https://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JS 的单线程特性就意味着所有的执行任务需要进行排队，随即便有了同步（阻塞）和异步（非阻塞）两种任务。&lt;/p&gt;
&lt;h6 id=&quot;一、那么异步任务是怎么执行的呢？&quot;&gt;&lt;a href=&quot;#一、那么异步任务是怎么执行的呢？&quot; class=&quot;headerlink&quot; title=&quot;一</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="js" scheme="https://qiuysh.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>React 之 hooks</title>
    <link href="https://qiuysh.github.io/2020/05/07/react%E4%B9%8Bhooks/"/>
    <id>https://qiuysh.github.io/2020/05/07/react%E4%B9%8Bhooks/</id>
    <published>2020-05-07T12:50:21.000Z</published>
    <updated>2021-12-03T06:24:23.715Z</updated>
    
    <content type="html"><![CDATA[<p>今年以来前端团队推荐使用 hooks，恰逢新开发一个产品，使用了 hooks 体验了一番。<br>首先要说的 hooks 仅限用于函数组件，那么下面就说说使用频繁的几个。</p><h4 id="一、useState"><a href="#一、useState" class="headerlink" title="一、useState"></a>一、useState</h4><p>useState 的出现解决了函数组件的 state 使用问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以直接初始化</span></span><br><span class="line"><span class="keyword">const</span> [status, changeStatus] = useState(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; changeStatus(!status)&#125;&gt;切换&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="二、useEffect"><a href="#二、useEffect" class="headerlink" title="二、useEffect"></a>二、useEffect</h4><p>一般会被认为是 componentDidMount、componentDidUpdate 和 componentwillUnmount 的集合体。<br>这种说法也不算错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 你关心的异步可以放在这</span></span><br><span class="line">    xxx();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> xxx  <span class="comment">// 你想要想卸载的逻辑</span></span><br><span class="line">&#125;, []); <span class="comment">// 你想多次触发，可以关注下最后这个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or 我可以有多个</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 你关心的异步可以放在这</span></span><br><span class="line">    xxx();</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> xxx  <span class="comment">// 你想要想卸载的逻辑</span></span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><h4 id="三、useRef"><a href="#三、useRef" class="headerlink" title="三、useRef"></a>三、useRef</h4><p>如果你不想粗暴的去获取 dom，而是更为优雅的使用 dom，你可以试试 useRef，当然如果是 class 组件可以用 createRef</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以直接初始化</span></span><br><span class="line"><span class="keyword">const</span> thisRef = useRef(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;thisRef&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="四、useReducer"><a href="#四、useReducer" class="headerlink" title="四、useReducer"></a>四、useReducer</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> [items, dispatch] = useReducer(<span class="function">(<span class="params">state, action</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                xxx</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure><h4 id="五、useImperativeHandle-forwardRef"><a href="#五、useImperativeHandle-forwardRef" class="headerlink" title="五、useImperativeHandle/forwardRef"></a>五、useImperativeHandle/forwardRef</h4><p>forwardRef 可以暴露整个子组件给父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ChildForm = forwardRef((props, ref) &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;form ref=&#123;ref&#125; &#123;...props&#125;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配合 useImperativeHandle 成对使用的情况下，可以暴露指定的属性或方法给父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ChildForm = forwardRef((props, ref) &#123;</span><br><span class="line">    useImperativeHandle(ref, () =&gt; (&#123;</span><br><span class="line">        getValues: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">        param,</span><br><span class="line">    &#125;));</span><br><span class="line">   <span class="keyword">return</span>(</span><br><span class="line">        &lt;form &#123;...props&#125;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="六、memo"><a href="#六、memo" class="headerlink" title="六、memo"></a>六、memo</h4><p>memo 函数式组件的优化方法，类似 class 组件中 PureComponent</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> Ele = memo(<span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;thisRef&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure><p>更多的 hooks 就不一一介绍了。</p><p>参考：<br><a href="https://react.docschina.org/docs/hooks-intro.html" target="_blank" rel="noopener">https://react.docschina.org/docs/hooks-intro.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今年以来前端团队推荐使用 hooks，恰逢新开发一个产品，使用了 hooks 体验了一番。&lt;br&gt;首先要说的 hooks 仅限用于函数组件，那么下面就说说使用频繁的几个。&lt;/p&gt;
&lt;h4 id=&quot;一、useState&quot;&gt;&lt;a href=&quot;#一、useState&quot; class</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="react" scheme="https://qiuysh.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>玩转 React-app-rewired</title>
    <link href="https://qiuysh.github.io/2020/05/01/%E7%8E%A9%E8%BD%ACreact-app-rewired/"/>
    <id>https://qiuysh.github.io/2020/05/01/%E7%8E%A9%E8%BD%ACreact-app-rewired/</id>
    <published>2020-05-01T03:50:21.000Z</published>
    <updated>2021-12-03T06:52:49.204Z</updated>
    
    <content type="html"><![CDATA[<h5 id="创建你的项目"><a href="#创建你的项目" class="headerlink" title="创建你的项目"></a>创建你的项目</h5><p>先全局安装好 create-react-app</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p>通过 yarn 或者 npm 来安装 customize-cra、react-app-rewired 来支持扩展，其中 customize-cra 包含一些插件：fixBabelImports、 override、 addLessLoader、 addDecoratorsLegacy、 addWebpackAlias、 overrideDevServer 等方法，react-app-rewired 替换 react-scripts。</p><p>那么怎么进行 webpack 配置？</p><p>1、创建 config-overrides.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  webpack: override(</span><br><span class="line"></span><br><span class="line">    fixBabelImports(<span class="string">'import'</span>, &#123;</span><br><span class="line">      libraryName: <span class="string">'antd'</span>,</span><br><span class="line">      libraryDirectory: <span class="string">'es'</span>,</span><br><span class="line">      style: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// less</span></span><br><span class="line">    addLessLoader(&#123;</span><br><span class="line">      javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 装饰器</span></span><br><span class="line">    addDecoratorsLegacy(),</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 别名</span></span><br><span class="line">    addWebpackAlias(&#123;</span><br><span class="line">      <span class="string">'@components'</span>: path.resolve(<span class="string">'src/components'</span>),</span><br><span class="line">      <span class="string">'@pages'</span>: path.resolve(<span class="string">'src/pages'</span>),</span><br><span class="line">      <span class="string">'@stories'</span>: path.resolve(<span class="string">'src/stories'</span>),</span><br><span class="line">      <span class="string">'@utils'</span>: path.resolve(<span class="string">'src/utils'</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ),</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、代理配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  webpack: override(</span><br><span class="line">    <span class="comment">//  代理</span></span><br><span class="line">    devServer: overrideDevServer(</span><br><span class="line">      (config) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...config,</span><br><span class="line">          proxy: [</span><br><span class="line">            &#123;</span><br><span class="line">              path: <span class="string">'/xxx/**'</span>,</span><br><span class="line">              target: <span class="string">'http://127.0.0.1:3000'</span>,</span><br><span class="line">              changeOrigin: <span class="literal">true</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、执行脚本配置<br>修改 package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "react-app-rewired start",</span><br><span class="line">  "build": "react-app-rewired build",</span><br><span class="line">  "test": "react-app-rewired test"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、demo地址<br><a href="https://github.com/qiuysh/react_g6_demo" target="_blank" rel="noopener">demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;创建你的项目&quot;&gt;&lt;a href=&quot;#创建你的项目&quot; class=&quot;headerlink&quot; title=&quot;创建你的项目&quot;&gt;&lt;/a&gt;创建你的项目&lt;/h5&gt;&lt;p&gt;先全局安装好 create-react-app&lt;/p&gt;
&lt;figure class=&quot;highlight s</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="react-app-rewired  create-react-app" scheme="https://qiuysh.github.io/tags/react-app-rewired-create-react-app/"/>
    
  </entry>
  
  <entry>
    <title>基于 G6 实现的拓扑</title>
    <link href="https://qiuysh.github.io/2020/04/21/%E5%9F%BA%E4%BA%8Eg6%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%8B%93%E6%89%91/"/>
    <id>https://qiuysh.github.io/2020/04/21/%E5%9F%BA%E4%BA%8Eg6%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%8B%93%E6%89%91/</id>
    <published>2020-04-21T11:09:12.000Z</published>
    <updated>2021-12-03T06:22:31.399Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是g6？"><a href="#什么是g6？" class="headerlink" title="什么是g6？"></a>什么是g6？</h4><p>G6 是一个图可视化引擎。它提供了图的绘制、布局、分析、交互、动画等图可视化的基础能力。</p><h4 id="重要的API"><a href="#重要的API" class="headerlink" title="重要的API"></a>重要的API</h4><ul><li>Graph：初始化的配置和方法；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">初始化属性：容器、宽高、画布模式...</span><br><span class="line">渲染：加载、渲染、更新...</span><br><span class="line">布局和销毁：布局、销毁...</span><br></pre></td></tr></table></figure></li><li>Item：node、edge的对象和方法；<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包含<span class="keyword">node</span><span class="title">和edge</span>的大小、颜色、方向、位置...</span><br></pre></td></tr></table></figure></li><li>Event：主要事件；<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span><span class="title">、edge</span>、canvas等事件...</span><br></pre></td></tr></table></figure></li><li>Shape：自定义node和edge；<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义节点和边的属性...</span><br></pre></td></tr></table></figure></li></ul><h4 id="拓扑实现"><a href="#拓扑实现" class="headerlink" title="拓扑实现"></a>拓扑实现</h4><h4 id="一、容器"><a href="#一、容器" class="headerlink" title="一、容器"></a>一、容器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二、实例化配置项"><a href="#二、实例化配置项" class="headerlink" title="二、实例化配置项"></a>二、实例化配置项</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ref = useRef(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> global_graph = <span class="keyword">new</span> G6.Graph(&#123;</span><br><span class="line">    container: findDOMNode(ref.current),</span><br><span class="line">    animate: <span class="literal">false</span>,</span><br><span class="line">    minZoom: <span class="number">0.2</span>,</span><br><span class="line">    maxZoom: <span class="number">2</span>,</span><br><span class="line">    modes: &#123;</span><br><span class="line">        <span class="keyword">default</span>: [</span><br><span class="line">            <span class="string">'drag-node'</span>,</span><br><span class="line">            <span class="string">'drag-canvas'</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    fitView: <span class="literal">false</span>,</span><br><span class="line">    layout: &#123;</span><br><span class="line">        type: <span class="string">'default-layout'</span>,</span><br><span class="line">        radiusX: <span class="number">300</span>, <span class="comment">// 必须</span></span><br><span class="line">        radiusY: <span class="number">300</span>, <span class="comment">// 必须</span></span><br><span class="line">        ordering: <span class="string">'topology'</span>,</span><br><span class="line">        angleRatio: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    nodeStateStyles: &#123;</span><br><span class="line">        hover: &#123;</span><br><span class="line">            lineWidth: <span class="number">3</span>,</span><br><span class="line">            fillOpacity: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        inhover: &#123;</span><br><span class="line">            opacity: <span class="number">0.2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    edgeStateStyles: &#123;</span><br><span class="line">        hover: &#123;</span><br><span class="line">            lineWidth: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="三、渲染"><a href="#三、渲染" class="headerlink" title="三、渲染"></a>三、渲染</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global_graph.changeData(data);</span><br></pre></td></tr></table></figure><h4 id="四、一些自定义功能"><a href="#四、一些自定义功能" class="headerlink" title="四、一些自定义功能"></a>四、一些自定义功能</h4><p>1、椭圆布局</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">G6.registerLayout(<span class="string">'default-layout'</span>, &#123;</span><br><span class="line">  <span class="comment">// 默认参数</span></span><br><span class="line">  getDefaultCfg() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      center: [ <span class="number">0</span>, <span class="number">0</span> ],           <span class="comment">// 布局中心</span></span><br><span class="line">      radiusX: <span class="literal">null</span>,               <span class="comment">// 默认固定x轴半径</span></span><br><span class="line">      radiusY: <span class="literal">null</span>,               <span class="comment">// 默认固定y轴半径</span></span><br><span class="line">      startAngle: <span class="number">0</span>,              <span class="comment">// 默认起始角度</span></span><br><span class="line">      endAngle: <span class="number">2</span> * <span class="built_in">Math</span>.PI,      <span class="comment">// 默认终止角度</span></span><br><span class="line">      clockwise: <span class="literal">true</span>,            <span class="comment">// 是否顺时针</span></span><br><span class="line">      divisions: <span class="number">1</span>,</span><br><span class="line">      ordering: <span class="literal">null</span>,             <span class="comment">// 节点在环上排序的依据。可选: 'topology', 'degree', 'null'</span></span><br><span class="line">      angleRatio: <span class="number">1</span>               <span class="comment">// 角度比</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 执行布局</span></span><br><span class="line">  execute() &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> nodes = self.nodes;</span><br><span class="line">    <span class="keyword">var</span> edges = self.edges;</span><br><span class="line">    <span class="keyword">var</span> n = nodes.length;</span><br><span class="line">    <span class="keyword">var</span> center = self.center;</span><br><span class="line">    <span class="keyword">var</span> divisions = self.divisions;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>2、缩放功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; config, handleZoom &#125;) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">onChange</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; step &#125; = options;</span><br><span class="line">    <span class="comment">// 处理拖拽过快的问题</span></span><br><span class="line">    <span class="keyword">let</span> rang = <span class="built_in">Math</span>.abs(v - value).toFixed(<span class="number">2</span>) - <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> len = (rang / step).toFixed(<span class="number">0</span>) - <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">await</span> handleZoom(v);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleCommand</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"gg-slider"</span>&gt;</span><br><span class="line">      &lt;Row&gt;</span><br><span class="line">        &lt;Col span=&#123;<span class="number">3</span>&#125;&gt;</span><br><span class="line">          &lt;Button type=<span class="string">"link"</span> </span><br><span class="line">            className=<span class="string">"command"</span></span><br><span class="line">            onClick=&#123; () =&gt; handleCommand(<span class="string">'minus'</span>)&#125; size=<span class="string">"small"</span>  </span><br><span class="line">          &gt;</span><br><span class="line">            &lt;Icon type=<span class="string">"minus"</span> /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Col&gt;</span><br><span class="line">        &lt;Col span=&#123;<span class="number">13</span>&#125;&gt;</span><br><span class="line">          &lt;Slider </span><br><span class="line">            &#123;...options&#125; </span><br><span class="line">            onChange=&#123;onChange&#125; </span><br><span class="line">            value=&#123;value&#125; </span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Col&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Col span=&#123;3&#125;&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Button type="link" </span></span><br><span class="line"><span class="regexp">            className="command"</span></span><br><span class="line"><span class="regexp">            onClick=&#123;() =&gt; handleCommand('plus')&#125; size="small"  </span></span><br><span class="line"><span class="regexp">          &gt;</span></span><br><span class="line"><span class="regexp">            &lt;Icon type="plus" /</span>&gt;</span><br><span class="line">          &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Col&gt;</span><br><span class="line">        &lt;Col span=&#123;<span class="number">5</span>&#125;&gt;</span><br><span class="line">          &lt;Input readOnly value=&#123;percent&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Col&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Row&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>3、更多…</p><h5 id="五、最终效果"><a href="#五、最终效果" class="headerlink" title="五、最终效果"></a>五、最终效果</h5><p><img src="WX20200614@2x.png" alt=""></p><p><a href="https://github.com/qiuysh/react_g6_demo.git" target="_blank" rel="noopener">demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是g6？&quot;&gt;&lt;a href=&quot;#什么是g6？&quot; class=&quot;headerlink&quot; title=&quot;什么是g6？&quot;&gt;&lt;/a&gt;什么是g6？&lt;/h4&gt;&lt;p&gt;G6 是一个图可视化引擎。它提供了图的绘制、布局、分析、交互、动画等图可视化的基础能力。&lt;/p&gt;
&lt;h4 i</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="g6、react" scheme="https://qiuysh.github.io/tags/g6%E3%80%81react/"/>
    
  </entry>
  
  <entry>
    <title>Webpack v4 升级笔记</title>
    <link href="https://qiuysh.github.io/2020/04/07/webpackv4%E5%8D%87%E7%BA%A7%E7%AC%94%E8%AE%B0/"/>
    <id>https://qiuysh.github.io/2020/04/07/webpackv4%E5%8D%87%E7%BA%A7%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-07T12:03:17.000Z</published>
    <updated>2021-12-03T06:25:23.256Z</updated>
    
    <content type="html"><![CDATA[<p>首先，对首先升级webpack相关的依赖就（shui）不（zi）说（shu）啦？<br>主要是介绍下几个重要的大变化。</p><h4 id="一、-mode"><a href="#一、-mode" class="headerlink" title="一、 mode"></a>一、 mode</h4><p>mode用来区分开发环境还是打包环境，此配置影响到后面的许多配置的默认配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode:  xxx  <span class="comment">// 可用development、production</span></span><br></pre></td></tr></table></figure><h4 id="二、loaders的变化"><a href="#二、loaders的变化" class="headerlink" title="二、loaders的变化"></a>二、loaders的变化</h4><p>新的rules系统取代了旧版本的loaders，loaders虽然还能兼容，rules更方便日后的理解和区别；<br>注意的点：</p><ul><li>rules取代loaders;</li><li>[“xx-loader”, “xx-loader”]取代！链式调用；</li><li>uses可接受多个loder，loader兼容一个存在；</li><li>所有的loader不可缺省；</li><li>json-loader自动支持；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [ <span class="comment">// 多个loader, 取消已经！隔开的方式，而采用数组形式的链式调用[x, x, x]</span></span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">"style-loader"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">"css-loader"</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        modules: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.jsx$/</span>,</span><br><span class="line">            loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、LoaderOptionsPlugin"><a href="#三、LoaderOptionsPlugin" class="headerlink" title="三、LoaderOptionsPlugin"></a>三、LoaderOptionsPlugin</h4><p>对loader options配置项的补充</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">   <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">     debug: <span class="literal">true</span>,</span><br><span class="line">     xxx</span><br><span class="line">   &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="四、optimization"><a href="#四、optimization" class="headerlink" title="四、optimization"></a>四、optimization</h4><p>包括压缩、分割、抽取第三方库…配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">        xxx</span><br><span class="line">    &#125;,</span><br><span class="line">    noEmitOnErrors: <span class="literal">true</span>,</span><br><span class="line">    minimize: <span class="literal">true</span>,</span><br><span class="line">    minimizer: [</span><br><span class="line">        xxx</span><br><span class="line">    ],</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        xxx</span><br><span class="line">        cacheGroups: &#123;</span><br><span class="line">            xxx</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>抽取指定库</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">entry:</span> &#123;</span><br><span class="line"><span class="symbol">    app:</span> xxx,</span><br><span class="line"><span class="symbol">    vendors:</span> [<span class="string">"react"</span>, <span class="string">"react-dom"</span>],</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="symbol">splitChunks:</span> &#123;</span><br><span class="line">    xxx</span><br><span class="line"><span class="symbol">    cacheGroups:</span> &#123;</span><br><span class="line"><span class="symbol">        vendor:</span> &#123;</span><br><span class="line"><span class="symbol">            name:</span> <span class="string">"vendors"</span>,</span><br><span class="line"><span class="symbol">            test:</span> <span class="string">"vendors"</span>,</span><br><span class="line"><span class="symbol">            priority:</span> <span class="number">-1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://www.webpackjs.com/guides/migrating/" target="_blank" rel="noopener">https://www.webpackjs.com/guides/migrating/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先，对首先升级webpack相关的依赖就（shui）不（zi）说（shu）啦？&lt;br&gt;主要是介绍下几个重要的大变化。&lt;/p&gt;
&lt;h4 id=&quot;一、-mode&quot;&gt;&lt;a href=&quot;#一、-mode&quot; class=&quot;headerlink&quot; title=&quot;一、 mode&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="webpack" scheme="https://qiuysh.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 Webpack 原理（二）</title>
    <link href="https://qiuysh.github.io/2019/07/13/%E6%B5%85%E8%B0%88webpack%E5%8E%9F%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://qiuysh.github.io/2019/07/13/%E6%B5%85%E8%B0%88webpack%E5%8E%9F%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2019-07-13T04:43:09.000Z</published>
    <updated>2021-12-03T06:22:47.541Z</updated>
    
    <content type="html"><![CDATA[<p>跑丢了😳</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跑丢了😳&lt;/p&gt;
</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="webpack" scheme="https://qiuysh.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 Webpack 原理（一）</title>
    <link href="https://qiuysh.github.io/2019/06/28/%E6%B5%85%E8%B0%88webpack%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://qiuysh.github.io/2019/06/28/%E6%B5%85%E8%B0%88webpack%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2019-06-28T13:19:07.000Z</published>
    <updated>2021-12-03T06:22:52.284Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack核心"><a href="#webpack核心" class="headerlink" title="webpack核心"></a>webpack核心</h3><ol><li><p>入口：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。</p></li><li><p>输入：指示 webpack 在哪里输出它所创建的 bundles。</p></li><li><p>loader：loader 让 webpack 能够去处理那些非 JavaScript 文件。</p></li><li><p>plugin：webpack 功能的扩展，可以用来处理各种各样的任务。</p></li></ol><h3 id="webpack构建流程"><a href="#webpack构建流程" class="headerlink" title="webpack构建流程"></a>webpack构建流程</h3><p>1、初始化参数</p><p>2、开始编译</p><p>3、确定入口</p><p>4、编译模块</p><p>5、完成模块编译</p><p>6、输出资源</p><p>7、输出完成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;webpack核心&quot;&gt;&lt;a href=&quot;#webpack核心&quot; class=&quot;headerlink&quot; title=&quot;webpack核心&quot;&gt;&lt;/a&gt;webpack核心&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;入口：指示 webpack 应该使用哪个模块，来作为构建其内部依赖</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="webpack" scheme="https://qiuysh.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>React 生命周期</title>
    <link href="https://qiuysh.github.io/2019/03/05/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://qiuysh.github.io/2019/03/05/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2019-03-05T12:22:58.000Z</published>
    <updated>2021-10-10T03:42:13.738Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>react16以后的版本相较于之前的版本，整体进行了重构，引入了Fiber架构这种设计，将一个任务分成多个小任务，且可根据优先级调度任务的执行与中止与否，从而提升了渲染速度和性能。</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>1、创建时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">constructor</span></span><br><span class="line">static getDerivedStateFromProps</span><br><span class="line">render</span><br><span class="line">componentDidMount</span><br></pre></td></tr></table></figure><p>2、更新时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> getDerivedStateFromProps</span><br><span class="line">shouldComponentUpdate</span><br><span class="line">getSnapshotBeforeUpdate</span><br><span class="line">render</span><br><span class="line">componentDidUpdate</span><br></pre></td></tr></table></figure><p>3、卸载时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentWillUnmount</span><br></pre></td></tr></table></figure><p>4、其它</p><p>不建议使用的生命周期UNSAFE_*，且后面将会移除；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UNSAFE_componentWillReceiveProps</span><br><span class="line">UNSAFE_componentWillMount</span><br><span class="line">UNSAFE_componentWillUpdate</span><br></pre></td></tr></table></figure><p>5、错误捕获</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentDidCatch()</span><br></pre></td></tr></table></figure><h4 id="参考图"><a href="#参考图" class="headerlink" title="参考图"></a>参考图</h4><p><img src="/2019/03/05/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/lifecycle.png" alt></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>static getDerivedStateFromProps能不用就不用，使用会增加组件复杂度。</li><li>带UNSAFE_*的生命周期能不用也不用，后面的大版本将移除。</li><li>getSnapshotBeforeUpdate中state已更新，可以获取render前的dom。</li></ul><p><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">React生命周期</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;react16以后的版本相较于之前的版本，整体进行了重构，引入了Fiber架构这种设计，将一个任务分成多个小任务，且可根据优先级调度任务的执</summary>
      
    
    
    
    
    <category term="react、lifecycle" scheme="https://qiuysh.github.io/tags/react%E3%80%81lifecycle/"/>
    
  </entry>
  
  <entry>
    <title>React 生命周期</title>
    <link href="https://qiuysh.github.io/2019/03/05/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://qiuysh.github.io/2019/03/05/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2019-03-05T12:22:58.000Z</published>
    <updated>2021-12-03T06:23:59.076Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>react16以后的版本相较于之前的版本，整体进行了重构，引入了Fiber架构这种设计，将一个任务分成多个小任务，且可根据优先级调度任务的执行与中止与否，从而提升了渲染速度和性能。</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>1、创建时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">constructor</span></span><br><span class="line">static getDerivedStateFromProps</span><br><span class="line">render</span><br><span class="line">componentDidMount</span><br></pre></td></tr></table></figure><p>2、更新时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> getDerivedStateFromProps</span><br><span class="line">shouldComponentUpdate</span><br><span class="line">getSnapshotBeforeUpdate</span><br><span class="line">render</span><br><span class="line">componentDidUpdate</span><br></pre></td></tr></table></figure><p>3、卸载时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentWillUnmount</span><br></pre></td></tr></table></figure><p>4、其它</p><p>不建议使用的生命周期UNSAFE_*，且后面将会移除；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UNSAFE_componentWillReceiveProps</span><br><span class="line">UNSAFE_componentWillMount</span><br><span class="line">UNSAFE_componentWillUpdate</span><br></pre></td></tr></table></figure><p>5、错误捕获</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentDidCatch()</span><br></pre></td></tr></table></figure><h4 id="参考图"><a href="#参考图" class="headerlink" title="参考图"></a>参考图</h4><p><img src="lifecycle.png" alt=""></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>static getDerivedStateFromProps能不用就不用，使用会增加组件复杂度。</li><li>带UNSAFE_*的生命周期能不用也不用，后面的大版本将移除。</li><li>getSnapshotBeforeUpdate中state已更新，可以获取render前的dom。</li></ul><p><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">React生命周期</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;react16以后的版本相较于之前的版本，整体进行了重构，引入了Fiber架构这种设计，将一个任务分成多个小任务，且可根据优先级调度任务的执</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="react、lifecycle" scheme="https://qiuysh.github.io/tags/react%E3%80%81lifecycle/"/>
    
  </entry>
  
  <entry>
    <title>Webgl 开篇</title>
    <link href="https://qiuysh.github.io/2018/12/12/webgl%E5%BC%80%E7%AF%87/"/>
    <id>https://qiuysh.github.io/2018/12/12/webgl%E5%BC%80%E7%AF%87/</id>
    <published>2018-12-12T02:29:32.000Z</published>
    <updated>2021-12-03T06:24:34.625Z</updated>
    
    <content type="html"><![CDATA[<p>WebGL (Web图形库) 是一种JavaScriptAPI，用于在任何兼容的Web浏览器中呈现交互式3D和2D图形，而无需使用插件。WebGL通过引入一个与OpenGL ES 2.0紧密相符合的API，可以在HTML5 canvas 元素中使用。</p><blockquote><p>WebGL完美地解决了现有的Web交互式三维动画的两个问题：第一，它通过HTML脚本本身实现Web交互式三维动画的制作，无需任何浏览器插件支持;第二，它利用底层的图形硬件加速功能进行的图形渲染，是通过统一的、标准的、跨平台的OpenGL接口实现的。</p></blockquote><p>PS：在此之前你需要对3D坐标系，网格、多边形和顶点，材质、纹理和光源，变换和矩阵，相机、透视、视口和投影，着色器等专业术语有一定的了解。</p><h4 id="1、怎么在页面上绘制一个webGL图形？"><a href="#1、怎么在页面上绘制一个webGL图形？" class="headerlink" title="1、怎么在页面上绘制一个webGL图形？"></a>1、怎么在页面上绘制一个webGL图形？</h4><ol><li>创建一个画布元素或者容器；</li><li>获取画布的上下文；</li><li>初始化视口；</li><li>创建顶点数组；</li><li>创建矩阵；</li><li>初始化着色器；</li><li>绘制；</li></ol><h4 id="2、a-sample-exampe"><a href="#2、a-sample-exampe" class="headerlink" title="2、a sample exampe"></a>2、a sample exampe</h4><p>(1)创建画布：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"webgl"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"480"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../gl-matrix.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./demo2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2)获取画布上下文：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'#webgl'</span>);</span><br><span class="line"><span class="keyword">const</span> gl = canvas.getContext(<span class="string">'webgl'</span>);</span><br></pre></td></tr></table></figure><p>(3)初始化着色器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>gl </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建缓存对象</span></span><br><span class="line">    <span class="keyword">const</span> positionBuffer = gl.createBuffer();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将缓存区对象绑定到目标.</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建正方形坐标.</span></span><br><span class="line">    <span class="keyword">const</span> positions = [</span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">        <span class="number">-1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">        <span class="number">1.0</span>, <span class="number">-1.0</span>,</span><br><span class="line">        <span class="number">-1.0</span>,<span class="number">-1.0</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据拷贝到缓存中</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, <span class="keyword">new</span> <span class="built_in">Float32Array</span>(positions), gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">position</span>: positionBuffer&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)绘制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>gl </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>programInfo </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>buffers </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawScene</span>(<span class="params">gl, programInfo, buffers</span>) </span>&#123;</span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>); <span class="comment">// Clear to black, fully opaque</span></span><br><span class="line">    gl.clearDepth(<span class="number">1.0</span>); <span class="comment">// Clear everything</span></span><br><span class="line">    gl.enable(gl.DEPTH_TEST); <span class="comment">// Enable depth testing</span></span><br><span class="line">    gl.depthFunc(gl.LEQUAL); <span class="comment">// Near things obscure far things</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear the canvas before we start drawing on it.</span></span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a perspective matrix, a special matrix that is used to simulate the</span></span><br><span class="line">    <span class="comment">// distortion of perspective in a camera. Our field of view is 45 degrees, with</span></span><br><span class="line">    <span class="comment">// a width/height ratio that matches the display size of the canvas and we only</span></span><br><span class="line">    <span class="comment">// want to see objects between 0.1 units and 100 units away from the camera.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fieldOfView = <span class="number">45</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>; <span class="comment">// in radians</span></span><br><span class="line">    <span class="keyword">const</span> aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;</span><br><span class="line">    <span class="keyword">const</span> zNear = <span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">const</span> zFar = <span class="number">100.0</span>;</span><br><span class="line">    <span class="keyword">const</span> projectionMatrix = mat4.create();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// note: glmatrix.js always has the first argument as the destination to receive</span></span><br><span class="line">    <span class="comment">// the result.</span></span><br><span class="line">    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the drawing position to the "identity" point, which is the center of the</span></span><br><span class="line">    <span class="comment">// scene.</span></span><br><span class="line">    <span class="keyword">const</span> modelViewMatrix = mat4.create();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now move the drawing position a bit to where we want to start drawing the</span></span><br><span class="line">    <span class="comment">// square.</span></span><br><span class="line"></span><br><span class="line">    mat4.translate(modelViewMatrix, <span class="comment">// destination matrix</span></span><br><span class="line">            modelViewMatrix, <span class="comment">// matrix to translate</span></span><br><span class="line">            [<span class="number">-0.0</span>, <span class="number">0.0</span>, <span class="number">-6.0</span>]); <span class="comment">// amount to translate</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tell WebGL how to pull out the positions from the position buffer into the</span></span><br><span class="line">    <span class="comment">// vertexPosition attribute.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> numComponents = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">const</span> type = gl.FLOAT;</span><br><span class="line">        <span class="keyword">const</span> normalize = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">const</span> stride = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> offset = <span class="number">0</span>;</span><br><span class="line">        gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);</span><br><span class="line">        <span class="comment">// WebGL 会从缓存中获取数据，这个缓存会与 gl.bindBuffer 绑定</span></span><br><span class="line">        gl.vertexAttribPointer(programInfo.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);</span><br><span class="line">        <span class="comment">// 将缓存中的数据复制给变量</span></span><br><span class="line">        gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tell WebGL to use our program when drawing</span></span><br><span class="line">    gl.useProgram(programInfo.program);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the shader uniforms</span></span><br><span class="line">    gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, <span class="literal">false</span>, projectionMatrix);</span><br><span class="line">    gl.uniformMatrix4fv(programInfo.uniformLocations.modelViewMatrix, <span class="literal">false</span>, modelViewMatrix);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> vertexCount = <span class="number">4</span>;</span><br><span class="line">        gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、学习资料"><a href="#3、学习资料" class="headerlink" title="3、学习资料"></a>3、学习资料</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL" target="_blank" rel="noopener">初识WebGL(MDN)</a></li><li><a href="https://www.w3cschool.cn/webgl/vjxu1jt0.html" target="_blank" rel="noopener">WebGL中文教程(W3C)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WebGL (Web图形库) 是一种JavaScriptAPI，用于在任何兼容的Web浏览器中呈现交互式3D和2D图形，而无需使用插件。WebGL通过引入一个与OpenGL ES 2.0紧密相符合的API，可以在HTML5 canvas 元素中使用。&lt;/p&gt;
&lt;blockq</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="webgl" scheme="https://qiuysh.github.io/tags/webgl/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 性能优化</title>
    <link href="https://qiuysh.github.io/2018/08/01/webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://qiuysh.github.io/2018/08/01/webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2018-08-01T04:17:28.000Z</published>
    <updated>2021-12-03T06:24:46.825Z</updated>
    
    <content type="html"><![CDATA[<p>跑丢了😳</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跑丢了😳&lt;/p&gt;
</summary>
      
    
    
    
    <category term="web技术" scheme="https://qiuysh.github.io/categories/web%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="webpack" scheme="https://qiuysh.github.io/tags/webpack/"/>
    
  </entry>
  
</feed>
